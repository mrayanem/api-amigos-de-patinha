// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Sempre a primeira letra é maiúscula
// Modelos que representam as tabelas no banco de dados

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  state      String
  city       String
  telephone  String   @unique @default("00-00000-0000")
  animals    Animal[]
  //role      UserRole @relation(fields: [userRoleRole_id, userRoleUser_id], references: [role_id, user_id])
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())

  @@map("users")
}

// Usar uma interrogação no final faz o campo ser opcional, ex: name String?
// amount é um tipo de quantidade

model Specie {
  id         String   @id @default(uuid())
  name       String
  animal     Animal?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
  @@map("species")
}

model Animal {
  id          String   @id @default(uuid())
  name        String?
  sex         String   @default("UNKNOWN")
  age         Int
  animalSize  String
  state       String
  city        String
  description String
  photoAnimal String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  specie      Specie   @relation(fields: [specieId], references: [id])
  specieId    String   @unique

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  @@map("animals")
}

model SubAnimalCategory {
  id             String         @id @default(uuid())
  categoryId     String         @unique
  animalCategory AnimalCategory @relation(fields: [categoryId], references: [id])

  created_at     DateTime       @default(now())
  updated_at DateTime @updatedAt

  @@map("SubAnimalCategories")
}

model AnimalCategory {
  id                String             @id @default(uuid())
  name              String
  subAnimalCategory SubAnimalCategory?

  created_at        DateTime           @default(now())
  updated_at DateTime @updatedAt @default(now())

  @@map("animalCategories")
}

model Role {
  id          String   @id @default(uuid()) // talvez? UUID
  name        String   @unique
  description String

  User        User[]

  created_at  DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())

  @@map("roles")
}